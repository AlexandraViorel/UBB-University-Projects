     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                                                          
    15 00000000 A575                        a dw 0111010110100101b
    16 00000002 7B9C                        b dw 1001110001111011b
    17 00000004 00000000                    c dd 0 ; the result is: 00000000000000001010110110110100b
    18 00000008 [0400]                      d dw c 
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24                                          ;Given the words A and B, compute the doubleword C as follows:
    25                                          ;   - the bits 0-5 of C are the same as the bits 3-8 of A
    26                                          ;   - the bits 6-8 of C are the same as the bits 2-4 of B
    27                                          ;   - the bits 9-15 of C are the same as the bits 6-12 of A
    28                                          ;   - the bits 16-31 of C have the value 0
    29                                  
    30 00000000 BB00000000                      mov EBX, 0 ; we will compute the result in EBX
    31                                          
    32                                          ; we isolate bits 3-8 of a
    33 00000005 B800000000                      mov EAX, 0
    34 0000000A 66A1[00000000]                  mov AX, word [a]
    35 00000010 6625F801                        and AX, 0000000111111000b
    36                                          
    37                                          ; we shift 3 positions to right
    38 00000014 B103                            mov CL, 3
    39 00000016 66D3E8                          shr AX, CL
    40                                          
    41                                          ; we put the bits into the result
    42 00000019 09C3                            or EBX, EAX 
    43                                          
    44                                          ; we isolate bits 2-4 of b
    45 0000001B B800000000                      mov EAX, 0
    46 00000020 66A1[02000000]                  mov AX, word [b]
    47 00000026 6683E01C                        and AX, 0000000000011100b
    48                                          
    49                                          ; we shift 4 positions to left
    50 0000002A B104                            mov CL, 4
    51 0000002C 66D3E0                          shl AX, CL
    52                                  
    53                                          ; we put the bits into the result 
    54 0000002F 09C3                            or EBX, EAX
    55                                          
    56                                          ; we isolate bits 6-12 of a 
    57 00000031 B800000000                      mov EAX, 0
    58 00000036 66A1[00000000]                  mov AX, word [a]
    59                                                        ;111111111
    60 0000003C 6625C01F                        and AX, 0001111111000000b
    61                                          
    62                                          ; we shift 3 positions to left 
    63 00000040 B103                            mov CL, 3
    64 00000042 66D3E0                          shl AX, CL
    65                                          
    66                                          ; we put the bits into the result
    67 00000045 09C3                            or EBX, EAX
    68                                          
    69                                          ; we force the value of bits 16-31 of the result to the value 0
    70 00000047 81E3FFFF0000                    and EBX, 00000000000000001111111111111111b
    71                                          
    72                                          ; we move the result from the register to the variable 
    73 0000004D 891D[04000000]                  mov [c], EBX
    74                                      
    75                                          ; exit(0)
    76 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
