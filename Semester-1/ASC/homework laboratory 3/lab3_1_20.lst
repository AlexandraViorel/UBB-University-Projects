     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 15                          a db 15h
    15 00000001 4503                        b dw 345h
    16 00000003 33221100                    c dd 112233h
    17 00000007 8877665544000000            d dq 4455667788h
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;(a + c) - b + a + (d - c)
    24 00000000 A1[07000000]                    mov EAX, dword [d]
    25 00000005 8B15[0B000000]                  mov EDX, dword [d + 4] 
    26 0000000B 8B1D[03000000]                  mov EBX, [c]
    27 00000011 B900000000                      mov ECX, 0 
    28 00000016 29D8                            sub EAX, EBX
    29 00000018 19CA                            sbb EDX, ECX
    30                                          ; EDX:EAX = d - c
    31 0000001A 89C3                            mov EBX, EAX
    32 0000001C 89D1                            mov ECX, EDX
    33                                          ; ECX:EBX = d - c
    34 0000001E 66BA0000                        mov DX, 0
    35 00000022 66B80000                        mov AX, 0
    36 00000026 A0[00000000]                    mov AL, [a]
    37 0000002B 660305[03000000]                add AX, word [c]
    38 00000032 661315[05000000]                adc DX, word [c + 2]
    39 00000039 6652                            push DX
    40 0000003B 6650                            push AX
    41 0000003D 58                              pop EAX
    42                                          ; EAX = a + c
    43 0000003E 662B05[01000000]                sub AX, word [b]
    44 00000045 0205[00000000]                  add AL, byte [a]
    45                                          ; EAX = (a + c) - b + a 
    46 0000004B BA00000000                      mov EDX, 0
    47 00000050 01C3                            add EBX, EAX
    48 00000052 11D1                            adc ECX, EDX 
    49                                          ; ECX:EBX = (d - c) + (a + c) - b + a
    50 00000054 89D8                            mov EAX, EBX
    51 00000056 89CA                            mov EDX, ECX 
    52                                          ; EDX:EAX = (d - c) + (a + c) - b + a
    53                                          
    54                                          
    55                                          ;sub EDX, [b]
    56                                          ;add EDX, [a]
    57                                          ;mov EAX, dword [d]
    58                                          ;mov EBX, dword [d + 4]
    59                                          ;sub EAX, [c]
    60                                          ;add EAX, EDX
    61                                          
    62                                      
    63                                          ; exit(0)
    64 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
