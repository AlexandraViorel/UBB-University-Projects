     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 12                          a db 12h
    15 00000001 3405                        b dw 534h
    16 00000003 33221100                    c dd 112233h
    17 00000007 3344556677880000            d dq 887766554433h
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ; a - b - (c - d) + d
    24 00000000 8B1D[07000000]                  mov EBX, dword [d]
    25 00000006 8B0D[0B000000]                  mov ECX, dword [d + 4]
    26 0000000C A1[03000000]                    mov EAX, [c]
    27 00000011 99                              cdq
    28 00000012 29D8                            sub EAX, EBX
    29 00000014 19CA                            sbb EDX, ECX
    30                                          ; EDX:EAX = c - d 
    31 00000016 89C3                            mov EBX, EAX
    32 00000018 89D1                            mov ECX, EDX 
    33                                          ; ECX:EBX = c - d 
    34 0000001A A0[00000000]                    mov AL, [a]
    35 0000001F 6698                            cbw
    36 00000021 668B15[01000000]                mov DX, [b]
    37 00000028 6629D0                          sub AX, DX 
    38                                          ; AX = a - b
    39 0000002B 98                              cwde
    40 0000002C 99                              cdq 
    41                                          ; EDX:EAX = a - b 
    42 0000002D 29D8                            sub EAX, EBX
    43 0000002F 19CA                            sbb EDX, ECX 
    44                                          ; EDX:EAX = a - b - (c - d)
    45 00000031 8B1D[07000000]                  mov EBX, dword [d]
    46 00000037 8B0D[0B000000]                  mov ECX, dword [d + 4]
    47                                          ; ECX:EBX = d
    48 0000003D 01D8                            add EAX, EBX 
    49 0000003F 11CA                            adc EDX, ECX 
    50                                          ; EDX:EAX = a - b - (c - d) + d
    51                                          
    52                                      
    53                                          ; exit(0)
    54 00000041 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000043 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
