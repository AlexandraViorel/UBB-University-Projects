#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

typedef struct{
int nr;
int prev;
int next;
int index;
}triple;

int global=0;
pthread_mutex_t *m;


void *f(void* f_thread)
{
	triple trio=*(triple*)f_thread;
	while(1)
	{
		pthread_mutex_lock(&m[trio.index]);
		if(global>10000)
		{
			pthread_mutex_unlock(&m[trio.next]);
			break;
		}
		global=global+trio.nr;
		printf("global:%d %d\n",global,trio.index);
		if(global%2==0)
		{
			printf("P:%d a deblocat pe %d\n",trio.index,trio.next);
			pthread_mutex_unlock(&m[trio.next]);
		}
		else 
		{
			printf("I:%d a deblocat pe %d\n",trio.index,trio.prev);
			pthread_mutex_unlock(&m[trio.prev]);
		}
	}
	return 0;
}



int main(int argc,char* argv[])
{
	int i;
	triple trio[(argc-1)/3];
	pthread_t t[(argc-1)/3];
	m=(pthread_mutex_t*)malloc((argc-1)/3*sizeof(pthread_mutex_t));
	for(i=0; i<(argc-1)/3; i++)
	{
		trio[i].nr=atoi(argv[3*i+1]);
		trio[i].prev=atoi(argv[3*i+2]);
		trio[i].next=atoi(argv[3*i+3]);
		trio[i].index=i;
		pthread_mutex_init(&m[i],NULL);
		pthread_mutex_lock(&m[i]);
		pthread_create(&t[i],NULL,f,(void*)&trio[i]);
	}
	pthread_mutex_unlock(&m[0]);
	for(i=0; i<(argc-1)/3; i++)
	{
		pthread_join(t[i],NULL);
		pthread_mutex_destroy(&m[i]);
	}
	return 0;
}	
