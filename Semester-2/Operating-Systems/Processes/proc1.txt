proc1

// A.c

#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <stdio.h>


int main(int argc, char** argv) {

        mkfifo(argv[1], 0600);
        int fd_fifo = open(argv[1], O_WRONLY);

        char filename[40];
        printf("filename: ");
        scanf("%s", filename);

        FILE *fptr;
        int x;
        fptr = fopen(filename, "r");
        while (fscanf(fptr, "%d", &x) != EOF)
        {
                printf("nr citit: %d\n", x);
                write(fd_fifo, &x, sizeof(int));
        }
        close(fd_fifo);
        return 0;
}

// B.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

int main(int argc, char** argv)
{
        int fd_fifo = open(argv[1], O_RDONLY);
        int p1_2_p2[2];
        int k, k1, sum=0, x, rez, i;
        pipe(p1_2_p2);

        k = fork();
        if (k == 0)
        {
                close(p1_2_p2[0]);
                while (read(fd_fifo, &x, sizeof(int)))
                {
                        sum += x;
                }
                printf("suma: %d", sum);
                write(p1_2_p2[1], &sum, sizeof(int));
                close(p1_2_p2[1]);
                exit(0);
        }
        else
        {
                k1 = fork();
                if (k1 == 0)
                {
                        close(p1_2_p2[1]);
                        read(p1_2_p2[0], &rez, sizeof(int));
                        for (i=1; i<=rez; i++)
                        {
                                if (rez%i == 0){
                                        printf("divizor: %d\n", i);
                                }
                        }
                        close(p1_2_p2[0]);
                        exit(0);
                }
                else {
                        close(p1_2_p2[0]);
                        close(p1_2_p2[1]);
                }
        }
        wait(0);
        wait(0);
        close(fd_fifo);
        unlink(argv[1]);
        return 0;
}

