proc 2

// A.c

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char** argv) {
        int x, y, cmmdc, cmmmc;
        mkfifo(argv[1], 0600);
        int fd_fifo = open(argv[1], O_WRONLY);
        printf("number 1: ");
        scanf("%d", &x);
        printf("number 2: ");
        scanf("%d", &y);
        int a = x;
        int b = y;
        while (a!=b){
                if (a>b){
                        a=a-b;
                }
                else
                {
                        b=b-a;
                }
        }
        cmmdc=a;
        cmmmc=(x*y)/cmmdc;

        write(fd_fifo, &cmmmc, sizeof(int));
        close(fd_fifo);
        return 0;
}


//B.c

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char** argv) {
        int p1p2[2];
        pipe(p1p2);

        int fd_fifo = open(argv[1], O_RDONLY);
        int cmmmc, i;
        int f, f1;
        f = fork();
        if (f == 0){
                close(p1p2[0]);
                read(fd_fifo, &cmmmc, sizeof(int));
                for (i=1; i<=cmmmc; i++){
                        if (cmmmc%i == 0){
                                write(p1p2[1], &i, sizeof(int));
                        }
                }
                close(p1p2[1]);
                exit(0);
        }
        else
        {
                f1 = fork();
                int rez;
                if (f1 == 0){
                        close(p1p2[1]);
                        while(read(p1p2[0], &rez, sizeof(int))){
                                printf("divizor: %d\n", rez);
                        }
                        close(p1p2[0]);
                        exit(0);

                }
                else{
                        close(p1p2[0]);
                        close(p1p2[1]);
                }
        }

        wait(0);
        wait(0);
        close(fd_fifo);
        unlink(argv[1]);
        return 0;
}

