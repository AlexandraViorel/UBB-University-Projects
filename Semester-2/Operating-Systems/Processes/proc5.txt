proc 5

// A.c

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char** argv) {
        mkfifo(argv[1], 0600);
        int fd_fifo = open(argv[1], O_WRONLY);
        int n;
        printf("n=");
        scanf("%d", &n);
        int i;
        for (i = 1; i<n; i++) {
                if (n%i == 0) {
                        printf("divizor: %d\n", i);
                        write(fd_fifo, &i, sizeof(int));
                }
        }
        close(fd_fifo);
        return 0;
}



// B.c

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char** argv) {
        int fd_fifo = open(argv[1], O_RDONLY);
        int p1p2[2];
        pipe(p1p2);
        int x, sum, sum1, f, f1;

        f = fork();
        if (f == 0) {
                close(p1p2[0]);
                sum = 0;
                while (read(fd_fifo, &x, sizeof(int)) > 0) {
                        sum += x;
                }
                write(p1p2[1], &sum, sizeof(int));
                close(p1p2[1]);
                exit(0);
        }
        else {
                f1 = fork();

                if (f1 == 0) {
                        close(p1p2[1]);
                        read(p1p2[0], &sum1, sizeof(int));
                        printf("the sum is: %d\n", sum1);
                        close(p1p2[0]);
                        exit(0);
                }
                else {
                        close(p1p2[0]);
                        close(p1p2[1]);
                }
                wait(0);
        }
        wait(0);
        close(fd_fifo);
        unlink(argv[1]);

        return 0;
}
