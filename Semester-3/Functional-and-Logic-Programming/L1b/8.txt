; 8. Return the list of nodes of a tree of type (2) accessed inorder.

; (car l) - the first element of the list is the root of the tree
; (cadr l) - the second element of the list, at superficial level, is the left subtree
; (caddr l) - the third element of the list, at the superficial level, is the right subtree

; mathematical model:
; myappend(l1l2...ln, p1p2...pm) = { p1p2...pm, if n = 0
;                                  { {l1} U myappend(l2...ln, p1p2...pm), otherwise

(defun myappend (l p)
    (cond
        ((null l) p)
        (t (cons (car l) (myappend (cdr l) p)))
    )
)

; mathematical model:
; inorder(l1l2l3) = { nil, if n = 0
;                   { myappend(inorder(l2), myappend(list(l1), inorder(l3))), otherwise

(defun inorder (l)
    (cond
        ((null l) nil)
        (t (myappend (inorder (cadr l)) (myappend (list (car l)) (inorder (caddr l)))))
    )
)

(print (inorder '(A (B) (C (D) (E)))))