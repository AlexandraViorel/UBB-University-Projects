; 11.Write a function to determine the depth of a list.

; determineMax(a, b) = { NIL, if a and b are not numbers
;                      { a, if b is not a number
;                      { b, if a is not a number
;                      { a, if a > b
;                      { b, otherwise

(defun determineMax (a b)
    (cond
        ((and (not (numberp a)) (not (numberp b))) NIL)
        ((not (numberp a)) b)
        ((not (numberp b)) a)
        ((> a b) a)
        (t b)
    )
)

; findMax(l1l2...ln) = { NIL, if n = 0
;                      { determineMax(l1, findMax(l2...ln)), otherwise

(defun findMax (l)
    (cond
        ((null l) NIL)
        (t (determineMax (car l) (findMax (cdr l))))
    )
)

; findDepth(l1l2...ln, k) = { k, if l is an atom
;                           { max(findDepth(l1, max),...,findDepth(ln, max)), otherwise

(defun findDepth (l k)
    (cond
        ((atom l) k)
        (t (apply #'findMax (list (mapcar #'(lambda(a) (findDepth a (+ 1 k))) l))))
    )
)


(defun main (l)
    (findDepth l 0)
)

(print (main '(1 2 (2 3 (4 5 (6 7) 4) 5 4))))