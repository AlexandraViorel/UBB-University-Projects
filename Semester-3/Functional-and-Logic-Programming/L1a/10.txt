; exercise 10

; a) Write a function to return the product of all the numerical atoms from a list, at superficial level.

; mathematical model:
; myproduct(l1l2...ln) = { 1, if n = 0
;                        { l1 * myproduct(l2...ln), if l1 is a number
;                        { myproduct(l2...ln), otherwise

(defun myproduct (l)
    (cond
        ((null l) 1)
        ((numberp (car l)) (* (car l) (myproduct (cdr l))))
        (t (myproduct (cdr l)))
    )
)

(print (myproduct '(2 3 a (2 3 4) 6)))


; b) Write a function to replace the first occurence of an element E in a given list with an other element O.

; mathematical model:
; replace(l1l2...ln, e, o, c) = { nil, if n = 0
;                               { 
;                               { {o} U replace(l2...ln, e, o, c+1), if l1 = e and c = 0
;                               { {l1} U replace(l2...ln, e, o, c), otherwise

(defun replaceel (l e o c)
    (cond
        ((null l) nil)
        ((listp (car l)) (cons (replaceel (car l) e o c) (replaceel (cdr l) e o c)))
        ((and (equal (car l) e) (equal c 0)) (cons o (replaceel (cdr l) e o (+ c 1))))
        (t (cons (car l) (replaceel (cdr l) e o c)))
    )
)

(print (replaceel '(1 2 3 4) 2 5 0))
(print (replaceel '(1 (2 3) 4) 2 5 0))


; c) Write a function to compute the result of an arithmetic expression memorised in preorder on a stack. 
; Examples:
; (+ 1 3) ==> 4 (1 + 3)
; (+ * 2 4 3) ==> 11 [((2 * 4) + 3)
; (+ * 2 4 - 5 * 2 2) ==> 9 ((2 * 4) + (5 - (2 * 2))

; mathematical model:
; myappend(l1l2...ln, p1p2...pm) = { p1p2...pm, if n = 0
;                                  { {l1} U myappend(l2...ln, p1p2...pn), otherwise

(defun myappend (l p)
    (cond
        ((null l) p)
        (t (cons (car l) (myappend (cdr l) p)))
    )
)

; mathematical model:
; myreverse(l1l2...ln) = { nil, if n = 0
;                        { myappend(myreverse(l2...ln), list(myreverse(l1))), if l1 is a list
;                        { myappend(myreverse(l2...ln), list(l1)), otherwise


(defun myreverse (l)
    (cond
        ((null l) nil)
        ((listp (car l)) (myappend (myreverse (cdr l)) (list (myreverse (car l)))))
        (t (myappend (myreverse (cdr l)) (list (car l))))
    )
)

; mathematical model:
; evaluate(l1l2...ln, s1s2...sm) = { s1, if n = 0
;                                  { evaluate(l2...ln, {l1} U s1s2...sm), if l1 is a number
;                                  { evaluate(l2...ln, {s1 * s2} U s3...sm), if l1 = *
;                                  { evaluate(l2...ln, {s1 + s2} U s3...sm), if l1 = +
;                                  { evaluate(l2...ln, {s1 / s2} U s3...sm), if l1 = /
;                                  { evaluate(l2...ln, {s1 - s2} U s3...sm), if l1 = -

(defun evaluate (l s)
    (cond
        ((null l) (car s))
        ((numberp (car l)) (evaluate (cdr l) (cons (car l) s)))
        ((string= (car l) "*") (evaluate (cdr l) (cons (* (car s) (cadr s)) (cddr s))))
        ((string= (car l) "+") (evaluate (cdr l) (cons (+ (car s) (cadr s)) (cddr s))))
        ((string= (car l) "/") (evaluate (cdr l) (cons (/ (car s) (cadr s)) (cddr s))))
        ((string= (car l) "-") (evaluate (cdr l) (cons (- (car s) (cadr s)) (cddr s))))
    )
)

(defun main (l)
    (evaluate (myreverse l) ())
)

(print (main '(+ * 2 4 - 5 * 2 2)))

; d) Write a function to produce the list of pairs (atom n), where atom appears for n times in the parameter 
;list. Example:
; (A B A B A C A) --> ((A 4) (B 2) (C 1)).

; mathematical model:
; nbocc(l1l2...ln, e) = { 0, if n = 0
;                       { 1 + nbocc(l2...ln, e), if l1 = e
;                       { nbocc(l2...ln, e), otherwise

(defun nbocc (l e)
    (cond
        ((null l) 0)
        ((equal (car l) e) (+ 1 (nbocc (cdr l) e)))
        (t (nbocc (cdr l) e))
    )
)

; deleteocc(l1l2...ln, e) = { nil, if n = 0
;                           { deleteocc(l2...ln, e), if l1 = e
;                           { {l1} U deleteocc(l2...ln, e), otherwise

(defun deleteocc (l e)
    (cond 
        ((null l) nil)
        ((equal (car l) e) (deleteocc (cdr l) e))
        (t (cons (car l) (deleteocc (cdr l) e)))
    )
)

; mathematical model:
; myappend(l1l2...ln, p1p2...pm) = { p1p2...pm, if n = 0
;                                  { {l1} U myappend(l2...ln, p1p2...pn), otherwise

(defun myappend (l p)
    (cond
        ((null l) p)
        (t (cons (car l) (myappend (cdr l) p)))
    )
)

; mathematical model:
; pairs(l1l2...ln) = { nil, if n = 0
;                    { {(l1, nbocc(l1))} U pairs(deleteocc(l2...ln, l1)), otherwise

(defun pairs (l)
    (cond   
        ((null l) nil)
        (t (cons (myappend (list (car l)) (list (nbocc l (car l)))) (pairs (deleteocc (cdr l) (car l)))))
    )
)

(print (pairs '(A B A B A C A)))
