; exercise 7

; a) Write a function to eliminate the n-th element of a linear list.

; mathematical model:
; eliminate(l1l2...lm, n, c) = { nil, if m = 0
;                              { nil, if n = c and m = 0
;                              { eliminate(l2...ln, n, c+1), if n = c
;                              { {l1} U eliminate(l2...ln, n, c+1), otherwise


(defun eliminate (l n c)
    (cond
        ((null l) nil)
        ((and (null (cdr l)) (equal n c)) nil)
        ((equal n c) (eliminate(cdr l) n (+ c 1)))
        (t (cons (car l) (eliminate (cdr l) n (+ c 1))))
    )
)

(print (eliminate '(1 2 3 4 5 6 7) 5 1))


; b) Write a function to determine the successor of a number represented digit by digit as a list, without 
; transforming the representation of the number from list to number. Example: (1 9 3 5 9 9) --> (1 9 3 6 0 0)

; mathematical model:
; carry(a, b, c) = { 0, if a + b + c <=9
;                  { 1, otherwise

(defun carry (a b c)
    (cond 
        ((<= (+ (+ a b) c) 9) 0)
        (t 1)
    )
)

; mathematical model:
; digit(a, b, c) = { (a + b + c) mod 10, if a + b + c > 9
;                  { a + b + c, otherwise

(defun digit (a b c) 
    (cond
        ((> (+ (+ a b) c) 9) (mod (+ (+ a b) c) 10))
        (t (+ (+ a b) c))
    )
)

; mathematical model:
; myappend(l1l2...ln, p1p2...pm) = { p1p2...pm, if n = 0
;                                  { {l1} U myappend(l2...ln, p1p2...pn), otherwise

(defun myappend (l p)
    (cond
        ((null l) p)
        (t (cons (car l) (myappend (cdr l) p)))
    )
)

; mathematical model:
; myreverse(l1l2...ln) = { nil, if n = 0
;                        { myappend(myreverse(l2...ln), list(myreverse(l1))), if l1 is a list
;                        { myappend(myreverse(l2...ln), list(l1)), otherwise


(defun myreverse (l)
    (cond
        ((null l) nil)
        ((listp (car l)) (myappend (myreverse (cdr l)) (list (myreverse (car l)))))
        (t (myappend (myreverse (cdr l)) (list (car l))))
    )
)

; mathematical model:
; myadd(l1l2...ln, p1p2...pm, c, r) = { nil, if n = 0 and m = 0 and c = 0
;                                     { 1, if n = 0 and m = 0 and c = 1
;                                     { myadd(l2...ln, nil, carry(l1, 0, c), {digit(l1, 0, c)} U r), if m = 0
;                                     { myadd(nil, p2...pm, carry(0, p1, c), {digit(0, p1, c)} U r), if n = 0
;                                     { myadd(l2...ln, p2...pm, carry(l1, p1, c), {digit(l1, p1, c)} U r), otherwise

(defun myadd (l p c r)
    (cond
        ((and (and (null l) (null p)) (equal c 1)) (cons c r))
        ((and (and (null l) (null p)) (equal c 0)) r)
        ((null p) (myadd (cdr l) nil (carry (car l) 0 c) (cons (digit (car l) 0 c) r)))
        ((null l) (myadd nil (cdr p) (carry 0 (car p) c) (cons (digit 0 (car p) c) r)))
        (t (myadd (cdr l) (cdr p) (carry (car l) (car p) c) (cons (digit (car l) (car p) c) r)))
    )
)

; mathematical model:
; successor(l1l2...ln) = myadd(l1l2...ln, 1, 0, nil)

(defun mysuccessor (l)
    (myadd (myreverse l) (list 1) 0 (list ))
)

(print (mysuccessor '(1 9 3 5 9 9)))

; c) Write a function to return the set of all the atoms of a list.
; Exemplu: (1 (2 (1 3 (2 4) 3) 1) (1 4)) ==> (1 2 3 4)

; mathematical model:
; checkifexists(l1l2...ln, e) = { nil, if n = 0
;                               { t, if l1 = e
;                               { checkifexists(l2...ln), otherwise

(defun checkifexists (l e)
    (cond
        ((null l) nil)
        ((equal (car l) e) t)
        (t (checkifexists (cdr l) e))
    )
)

; mathematical model:
; linearize(l1l2...ln) = { nil, if n = 0
;                        { {l1} U linearize(l2...ln), if l1 is a number
;                        { linearize(l1) U linearize(l2...ln), if l1 is a list
;                        { linearize(l2...ln), otherwise


(defun linearize (l)
    (cond
        ((null l) nil)
        ((numberp (car l)) (cons (car l) (linearize (cdr l))))
        ((listp (car l)) (myappend (linearize (car l)) (linearize (cdr l))))
        (t (linearize (cdr l)))
    )
)

; mathematical model:
; toSet(l1l2...ln, res) = { res, if n = 0
;                         { toSet(l2...ln, myappend(res, l1)), if checkifexists(r, l1) = nil
;                         { toSet(l2...ln, res), otherwise

(defun toset (l r)
    (cond
        ((null l) r)
        ((checkifexists r (car l)) (toset (cdr l) r))
        (t (toset (cdr l) (myappend r (list (car l)))))
    )
)

(defun main (l)
    (toset (linearize l) (list))
)

(print (main '(1 (2 (1 3 (2 4) 3) 1) (1 4))))


; d) Write a function to test whether a linear list is a set.

; mathematical model:
; checkifexists(l1l2...ln, e) = { nil, if n = 0
;                               { t, if l1 = e
;                               { checkifexists(l2...ln), otherwise

(defun checkifexists (l e)
    (cond
        ((null l) nil)
        ((equal (car l) e) t)
        (t (checkifexists (cdr l) e))
    )
)

; mathematical model:
; checkifset(l1l2...ln) = { t, if n = 0
;                         { nil, if checkifexists(l2...ln, l1) = t
;                         { checkifset(l2...ln), otherwise

(defun checkifset (l)
    (cond
        ((null l) t)
        ((checkifexists (cdr l) (car l)) nil)
        (t (checkifset (cdr l)))
    )
)

(print (checkifset '(1 2 3 4 2 3)))
(print (checkifset '(1 2 3 4 5)))