; exercise 2
; a)Write a function to return the product of two vectors.
; https://en.wikipedia.org/wiki/Dot_product

; mathematical model:
; dotProduct(l1l2...ln, k1k2...km) = { 0, if n = 0
;                                    { l1*k1 + dotProduct(l2...ln, k2...km), otherwise

(defun dotProduct (a b)
    (cond 
        ((null a) 0)
        (t (+ (* (car a) (car b)) (dotProduct (cdr a) (cdr b))))
    )
)

(print (dotProduct '(1 3 -5) '(4 -2 -1)))
; => 1*4 + 3*-2 + -5*-1 = 3


; b)Write a function to return the depth of a list. Example: the depth of a linear list is 1.

; mathematical model:
; myMax(a, b) = { a , if a > b
;               { b, otherwise

(defun myMax (a b)
    (cond 
        ((> a b) a)
        (t b)
    )
)

; mathematical model:
; depthList(l1l2...ln, a) = { c , if n = 0
;                           { myMax(depthList(l1,c+1), depthList(l2...ln, c)) , if l1 is a list
;                           { depthList(l2...ln, c) , otherwise

(defun depthList (l a)
    (cond
        ((null l) a)
        ((listp (car l)) (my_max (depth_list (car l) (+ a 1)) (depthList (cdr l) a)))
        (T (depthList (cdr l) a))
    )
)

(print (depthList '(1 2 3) 1))
; => 1

; c)Write a function to sort a linear list without keeping the double values.

; mathematical model:
; insert(l1l2...ln, e) = { list(e) , if n = 0
;                        { l1l2...ln , if l1 = e
;                        { {e} U l1l2...ln, if e < l1
;                        { {l1} U insert(l2...ln, elem)


(defun insert (l e)
    (cond
        ((null l) (list e))
        ((equal (car l) e) l)
        ((< e (car l)) (cons e l))
        (T (cons (car l) (insert (cdr l) e)))
    )
)

; mathematical model:
; sortare(l1l2...ln) = { nil , if n = 0
;                      { insert(sortare(l2...ln), l1) , otherwise

(defun sortare (l)
    (cond
        ((null l) nil)
        (T (insert (sortare (cdr l)) (car l)))
    )
)

(print (sortare '(9 3 9 4 2 5 6 7 1 8)))
; => (1 2 3 4 5 6 7 8 9)

; d)Write a function to return the intersection of two sets.

; mathematical model: 
; contains(l1l2...ln, e) = { NIL, if n = 0
;                          { true, if l1 = e
;                          { contains(l2...ln, e), otherwise

(defun contains (l e)
    (cond
        ((null l) nil)
        ((equal (car l) e) T)
        (T (contains (cdr l) e))
     )
)

; mathematical model:
; intersection(l1l2...ln, k1k2...km) = { NIL , if n = 0 or m = 0
;                                      { {l1} U intersection(l2...ln, p1p2...pm) , if contains(p1p2...pm, l1) is true
; intersection(l2...ln, p1p2...pm) , otherwise

(defun intersectionn (l k)
    (cond
        ((or (null l) (null k)) nil)
        ((contains k (car l)) (cons (car l) (intersectionn (cdr l) k)))
        (t (intersectionn (cdr l) k))
    )
)

(print (intersectionn '(1 2 3 4 5) '(5 6 7 9)))
; => (5)