; exercise 6

; a) Write a function to test whether a list is linear.


; mathematical model:
; islinear(l1...ln) = { t, if n = 0
;                     { nil, if l1 is a list
;                     { islinear(l2...ln), otherwise

(defun islinear (l)
    (cond
        ((null l) t)
        ((listp (car l)) nil)
        (t (islinear (cdr l)))
    )
)

(print (islinear '(1 2 3 4)))
(print (islinear '(1 2 (3 4) 4)))


; b) Write a function to replace the first occurence of an element E in a given list with an other element O.

; mathematical model:
; replace(l1l2...ln, e, o, c) = { nil, if n = 0
;                               { 
;                               { {o} U replace(l2...ln, e, o, c+1), if l1 = e and c = 0
;                               { {l1} U replace(l2...ln, e, o, c), otherwise

(defun replaceel (l e o c)
    (cond
        ((null l) nil)
        ((listp (car l)) (cons (replaceel (car l) e o c) (replaceel (cdr l) e o c)))
        ((and (equal (car l) e) (equal c 0)) (cons o (replaceel (cdr l) e o (+ c 1))))
        (t (cons (car l) (replaceel (cdr l) e o c)))
    )
)

(print (replaceel '(1 2 3 4) 2 5 0))
(print (replaceel '(1 (2 3) 4) 2 5 0))


; c) Write a function to replace each sublist of a list with its last element.
; A sublist is an element from the first level, which is a list.
; Example: (a (b c) (d (e (f)))) ==> (a c (e (f))) ==> (a c (f)) ==> (a c f)
; (a (b c) (d ((e) f))) ==> (a c ((e) f)) ==> (a c f)

; mathematical model:
; last(l1l2...ln) = { nil, if n = 0
;                   { l1, if n = 1 and l1 is an atom
;                   { last(l1), if n = 1 and l1 is a list
;                   { last(l2...ln), otherwise


(defun lastt (l)
    (cond
        ((null l) nil)
        ((and (null (cdr l)) (listp (car l))) (lastt (car l)))
        ((and (null (cdr l)) (atom (car l))) (car l))
        (t (lastt (cdr l)))
    )
)

; mathematical model:
; replacelast(l1l2...ln) = { nil, if n = 0
;                          { {l1} U replacelast(l2...ln), if l1 is an atom
;                          { {last(l1)} U replacelast(l2...ln), if l1 is a list(otherwise)

(defun replacelast (l)
    (cond
        ((null l) nil)
        ((atom (car l)) (cons (car l) (replacelast(cdr l))))
        (t (cons (lastt (car l)) (replacelast (cdr l))))
    )
)

(print (replacelast '(a (b c) (d ((e) f)))))


; d) Write a function to merge two sorted lists without keeping double values.

; merge(l1l2...ln, p1p2...pm) = { nil, if n = m = 0
;                               { p1p2...pm, if n = 0
;                               { l1l2...ln, if m = 0
;                               { {l1} U merge(l2...ln, p1p2...pm), if l1>p1
;                               { {p1} U merge(l1l2...ln, p2...pm), if l1<p1
;                               { {l1} U merge(l2...ln, p2...pm), if l1=p1


(defun mergelist (l1 l2)
    (cond
        ((and (null l1) (null l2)) nil)
        ((null l1) l2)
        ((null l2) l1)
        ((> (car l1) (car l2)) (cons (car l2) (mergelist l1 (cdr l2))))
        ((< (car l1) (car l2)) (cons (car l1) (mergelist (cdr l1) l2)))
        (t (cons (car l1) (mergelist (cdr l1) (cdr l2))))
    )
)

(print (mergelist '(1 2 3 4) '(2 3 4 5 6)))